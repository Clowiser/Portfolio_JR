import React, {useEffect, useState} from "react";
import axios from "axios";
import {
    SElementContainer,
    SElementImage, SElementText, SPortfolioDetailsLink,
    SPortfolioWrapper, SSoftwareDevIcons,
} from "../PortfolioIndex.styled";
import {useIntl} from "react-intl";


const PortfolioWebWork = (): JSX.Element => {
    const intl = useIntl();
    const [data, setData] = useState<any[]>([]);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(false);

    const [options, setOptions] = useState("");

    // const url = "http://localhost:3000/api/portfolio_web_realisations";
    //
    // useEffect(() => {
    //     setLoading(true)
    //     axios.get(url)
    //         .then(res => {
    //             setData(res.data)
    //             setLoading(false);
    //         })
    //         .catch(error => {
    //             setError(error);
    //             console.log(error)
    //         })
    // }, []);
    //
    // if (error) {
    //     return <p>{intl.formatMessage({id: 'loading_api_error'})}</p>
    // }
    // if (loading) {
    //     return <p>{intl.formatMessage({id: 'loading_api_loading'})}</p>
    // }

    const bands = [
        {
            name: 'Nirvanilus',
            albums: 9,
            members: 6,
            formed_in: 1996,
        },
        {
            name: 'Yvanos',
            albums: 10,
            members: 4,
            formed_in: 1981,
        },
        {
            name: 'Ariba',
            albums: 3,
            members: 3,
            formed_in: 1987,
        },
    ];

    useEffect(() => {
        const handleChange = (currentOptions: string) => {
            setOptions(currentOptions)
            let optionsArray: any = [];

            if (currentOptions === "name") {
                // bands.map((element) => {
                //     optionsArray.push(element.name);
                //     optionsArray.sort();
                //     console.log(optionsArray);
                const sorted = [...bands].sort((a, b) =>
                    a.name > b.name ? 1 : -1,
                );
                console.log(sorted);
                setData(sorted);
                // })
            } else if (currentOptions === "members") {
                // data.map((e) => {
                //     console.log(e.date)
                // })
                const sorted = [...bands].sort((a, b) =>
                    a.members > b.members ? 1 : -1,
                );
                console.log(sorted);
                setData(sorted);
            } else {
                const sorted = [...bands];
                console.log(sorted);
                setData(sorted);
                console.log("valeur vide - valeur initiale du useState")
            }
        }
        handleChange(options)
        console.log(options);
    }, [options])


    return (
        <>

            <select id="webWork" onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                setOptions(e.target.value)
            }} value={options}>
                <option value="">Par d√©faut</option>
                <option value="name">Par technologie</option>
                <option value="members">Par date</option>
            </select>

            <>{data.map((e) => {
                return <p>{e.name}</p>
            })}
            </>
            {/*<SPortfolioWrapper>*/}
            {/*    {data.map((element) => {*/}
            {/*        return (*/}
            {/*            <div key={element.id}>*/}
            {/*                <SElementContainer>*/}
            {/*                    <SPortfolioDetailsLink to={`/portfolio/WW/${element.id}`}>*/}
            {/*                        <SElementImage src={element.image} alt={"img" + element.id}/>*/}
            {/*                    </SPortfolioDetailsLink>*/}
            {/*                    <SSoftwareDevIcons src={element.icon_section} alt={"icons software development"}>*/}
            {/*                    </SSoftwareDevIcons>*/}
            {/*                    <SElementText>*/}
            {/*                        <p>{element.title}</p>*/}
            {/*                    </SElementText>*/}
            {/*                </SElementContainer>*/}
            {/*            </div>*/}
            {/*        )*/}
            {/*    })}*/}
            {/*</SPortfolioWrapper>*/}
        </>
    );
}

export default PortfolioWebWork;